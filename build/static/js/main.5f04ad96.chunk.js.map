{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","then","response","data","delete","Filter","props","onSubmit","event","preventDefault","setNewFilter","value","filter","onChange","target","PersonForm","useState","newName","setNewName","newNumber","setNewNumber","personer","persons","find","n","name","changedPerson","nameObject","number","map","person","includes","window","confirm","personService","returnedPerson","setPersons","setErrorMessage","setTimeout","catch","error","alert","concat","type","Persons","setFiltertoShow","toLowerCase","indexOf","key","returnFilter","Notification","message","className","RemoveButton","handleClick","text","Button","onClick","App","addFilter","errorMessage","useEffect","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f04ad96.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst removePerson = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update,\n    removePerson: removePerson\n}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\nconst Filter = (props) => {\n\n  const setFilter = (event) => {\n    event.preventDefault()\n    props.setNewFilter('')\n\n  }\n\n  const handleFilterChange = (event) => {\n    props.setNewFilter(event.target.value)\n  }\n\n\n  return (\n    <form onSubmit={setFilter}>\n      <div>\n        filter shown with <input value={props.filter}\n          onChange={handleFilterChange} />\n      </div>\n    </form>\n  )\n}\n\nconst PersonForm = (props) => {\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const personer = props.persons.find(n => n.name === newName)\n  const changedPerson = { ...personer }\n\n  const nameObject = {\n    name: newName,\n    number: newNumber\n  }\n\n  const addNameNumber = (event) => {\n    event.preventDefault()\n    if (props.persons.map((person) => person.name).includes(newName)) {\n      const result = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n      if (result) {\n        personService\n          .update(changedPerson.id, nameObject)\n          .then(returnedPerson => {\n            props.setPersons(props.persons.map(person => person.id !== returnedPerson.id ? person : returnedPerson))\n            props.setErrorMessage(\n              `Number was changed for '${newName}' `\n            )\n            setTimeout(() => {\n              props.setErrorMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            alert(\n              `the person '${newName}' was already deleted from the server`\n            )\n           \n            props.setPersons(props.persons.filter(n => n.id !== props.persons.id))\n          })\n      }\n    } else {\n     \n      personService\n        .create(nameObject)\n        .then(response => {\n          props.setPersons(props.persons.concat(response.data))\n          setNewName('')\n          setNewNumber('')\n          props.setErrorMessage(\n            `Added '${newName}' `\n          )\n          setTimeout(() => {\n            props.setErrorMessage(null)\n          }, 5000)\n        }) \n        .catch(error => {\n          alert(\n            `the person '${newName}' was already deleted from the server`\n          )\n         \n          props.setPersons(props.persons.filter(n => n.id !== props.persons.id))\n        })\n\n    }\n  }\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  return (\n    <form onSubmit={addNameNumber}>\n      <div>\n        name: <input value={newName}\n          onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input value={newNumber}\n          onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = (props) => {\n\n  const returnFilter = () => {\n    const setFiltertoShow = props.persons.filter(person =>\n      person.name.toLowerCase().indexOf(props.filter.toLowerCase()) !== -1)\n    if (props.filter !== '') {\n      return (\n        setFiltertoShow.map((person) =>\n          <p key={person.name}>\n            {person.name} {person.number} <RemoveButton persons={props.persons} setPersons={props.setPersons} setErrorMessage={props.setErrorMessage}/>\n          </p>\n        ))\n    } else {\n      return (\n        props.persons.map((person) =>\n          <p key={person.name}>\n            {person.name} {person.number} <RemoveButton persons={props.persons} setPersons={props.setPersons} person={person} setErrorMessage={props.setErrorMessage}/>\n          </p>\n        ))\n    }\n  }\n  return (\n    <div>\n      {returnFilter()}\n    </div>\n  )\n\n\n}\nconst Notification = ({ message }) => {\n  \n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n  \n}\nconst RemoveButton = (props) => {\n\n  return (<Button handleClick={() => {\n    if (window.confirm(`Delete '${props.person.name}' ?`)) {\n      personService\n        .removePerson(props.person.id)\n        .catch(error => {\n          alert(`the person '${props.person.name}' was already deleted from server`)\n          props.setPersons(props.persons.filter(n => n.id !== props.person.id))\n        })\n        props.setErrorMessage(\n          `'${props.person.name}' was deleted from server`\n        )\n        setTimeout(() => {\n          props.setErrorMessage(null)\n        }, 5000)\n        props.setPersons(props.persons.filter(n => n.id !== props.person.id))\n      }\n  }} text=\"delete\"></Button>)\n}\n\nconst Button = (props) => {\n  const { handleClick } = props\n  return (\n    <button onClick={handleClick}>\n      {props.text}\n    </button>\n  )\n}\n\nconst App = () => {\n  const [addFilter, setNewFilter] = useState('')\n  const [persons, setPersons] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  \n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <Filter filter={addFilter} setNewFilter={setNewFilter} />\n      <h3>add a new</h3>\n      <PersonForm persons={persons} setPersons={setPersons} setErrorMessage={setErrorMessage} />\n      <h3>Numbers</h3>\n      <Persons persons={persons} filter={addFilter} setPersons={setPersons} setErrorMessage={setErrorMessage} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}